/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useMemo } from 'react'
import { useGLTF} from '@react-three/drei'
import { useThree } from '@react-three/fiber';
import { ToonShader } from '../Shaders/ToonShader';

import { Vector3, Color, MeshToonMaterial } from "three";
import { GhibliShader } from '../Shaders/GhibliShader';


export function Setup(props) {
  const { nodes, materials } = useGLTF('/setup.glb')
  const { viewport } = useThree()

  const uniformstoon = useMemo(() => {
    return {
        ...ToonShader.uniforms,
        uBaseColor: { value: new Color('#FFCBCB')},
        uAmbientLightColor: { value: new Color('#050505')},
        uDirLightColor: { value: new Color("white")},
        uDirLightPos: { value: new Vector3(100,100,100)},
        uLineColor1: { value: new Color("#808080")},
        uLineColor2: { value: new Color("black")}
        }
  },[])

  const uniformsghibli = useMemo(
    () => ({
      colorMap: {
        value: props.colors,
      },
      brightnessThresholds: {
        value: [0.01, 0.15, 0.01],
      },
      lightPosition: { value: new Vector3(100, 100, 100) },
    }),
    [props.colors]
  );

  return (
    <group {...props} dispose={null} scale={viewport.width/45}> 
      <mesh
        name="Foliage"
        castShadow
       
        geometry={nodes.Foliage.geometry}
        material={materials['Stylized Foliage.001']}
        rotation={[0, 0.225, 0]}
      >
        <shaderMaterial
            attach="material"
            {...GhibliShader}
            // uniforms={uniformsghibli}
        />
        </mesh>
      <mesh
        name="bark"
        castShadow
        
        geometry={nodes.bark.geometry}
        material={materials['Material.001']}
        rotation={[0, -1.51, 0]}
      >
        {/* <shaderMaterial
            attach="material"
            {...ToonShader}
            uniforms={uniformstoon}
        /> */}

        <meshToonMaterial color={'#FEB941'}/>
        
        </mesh>

    </group>
  )
}

useGLTF.preload('/setup.glb')

